plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.wispforest.io' }
	maven { url "https://www.cursemaven.com/" }
	maven { url 'https://jitpack.io' }

	maven {
		name 'Progwm16 maven'
		url 'https://dvs1.progwml6.com/files/maven'
	}
	maven { url = "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
	maven {
		name 'tterrag maven'
		url 'https://maven.tterrag.com'
	}
	maven { // forge config api port
		name = "Fuzs Mod Resources"
		url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	include "io.wispforest:owo-sentinel:${project.owo_version}"
	modRuntimeOnly("com.terraformersmc:modmenu:4.1.2")
	modImplementation("curse.maven:jade-324717:4328558")

	modCompileOnlyApi("curse.maven:farmers-delight-fabric-482834:4111426")
	modCompileOnlyApi("curse.maven:nethers-delight-fabric-701831:4353098")
	modCompileOnlyApi("com.simibubi.create:create-fabric-1.19.2:0.5.1-b-build.1089+mc1.19.2")

	// Only for data gen
//	modImplementation("curse.maven:farmers-delight-fabric-482834:4111426")
//	modImplementation("curse.maven:nethers-delight-fabric-701831:4353098")
//	modImplementation("com.simibubi.create:create-fabric-1.19.2:0.5.1-b-build.1089+mc1.19.2")
//	modApi "net.minecraftforge:forgeconfigapiport-fabric:4.2.9"

	include(implementation(annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")))
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "infinitybuttons"
	versionNumber = "4.0.4-fabric-1.19.2"
	versionName = "Infinity Buttons [FABRIC] 4.0.4 - 1.19.2"
	versionType = "release"
	uploadFile = remapJar
	gameVersions = ["1.19", "1.19.1", "1.19.2"]
	loaders = ["fabric"]
	dependencies {
		required.project "owo-lib"
		optional.project "modmenu"
	}
	changelog = rootProject.file("CHANGELOG_LATEST.md").text

	syncBodyFrom = rootProject.file("README.md").text
	tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

curseforge {
	project {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		id = "661902"
		changelog = rootProject.file("CHANGELOG_LATEST.md").text
		changelogType = "markdown"
		releaseType = "release"
		addGameVersion "1.19"
		addGameVersion "1.19.1"
		addGameVersion "1.19.2"
		addGameVersion "Fabric"

		relations {
			requiredDependency "owo-lib"
			optionalDependency "modmenu"
		}
		mainArtifact(remapJar) {
			displayName = "Infinity Buttons [FABRIC] 4.0.4 - 1.19.2"
		}
		options {
			javaVersionAutoDetect = false
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

loom {
	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=infinitybuttons"

			runDir "build/datagen"
		}
	}
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
